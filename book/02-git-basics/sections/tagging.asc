[[_git_tagging]]
=== برجسب‌گذاری

(((tags)))
مانند بیشتر VCSهای دیگر، گیت قابلیت برچسب‌زدن (Tag/تگ) نقاطی خاص از پروژه را به عنوان نقاط مهم دارد.
معمولاً افراد از این قابلیت برای نشانه‌گذاری نسخه‌های قابل ارائه یا _release_ استفاده می‌کنند (`v1.0`، `v2.0` و به همین ترتیب).
در این بخش می‌آموزید که چگونه تگ‌های از پیش موجود را لیست کنید، چگونه تگ بسازید و از بین ببرید و اینکه انواع مختلف تگ‌ها کدامند.

==== فهرست برچسب های موجود

لیست کردن تگ‌های از پیش موجود در گیت بسیار ساده است.
کافیست `git tag` را (با آپشن‌های `-l` یا `--list`) تایپ کنید:(((git commands, tag)))

[source,console]
----
$ git tag
v1.0
v2.0
----

این دستور تگ‌ها را به ترتیب الفبا نشان می‌دهد؛ ترتیب نمایش اهمیت خاصی ندارد.

همچنین شما می‌توانید برچسب‌هایی که با الگویی خاص مطابقت دارند را جست‌وجو کنید.
برای نمونه مخزن سورس گیت بیش از ۵۰۰ برچسب دارد.
به طور مثال، اگر فقط دنبال سری 1.8.5 می‌گردید می‌توانید این دستور را اجرا کنید:

[source,console]
----
$ git tag -l "v1.8.5*"
v1.8.5
v1.8.5-rc0
v1.8.5-rc1
v1.8.5-rc2
v1.8.5-rc3
v1.8.5.1
v1.8.5.2
v1.8.5.3
v1.8.5.4
v1.8.5.5
----

[NOTE]
.Listing tag wildcards requires `-l` or `--list` option
====
If you want just the entire list of tags, running the command `git tag` implicitly assumes you want a listing and provides one; the use of `-l` or `--list` in this case is optional.

If, however, you're supplying a wildcard pattern to match tag names, the use of `-l` or `--list` is mandatory.
====

==== ساخت برچسب ها

گیت دو گونه برچسب دارد: _lightweight_ یا __سبک__ و  _annotated_ یا __مفصل__.

یگ برچسب  lightweight بسیار شبیه یک شاخه ی بدون تغییر است. -- فقط اشاره گری به یک ثبت ویژ] و مشخص است.

برچسب های Annotated , however, به عنوان مجموعه ای از اشیاء کامل در پایگاه داده گیت ذخیره می شوند.
این برچسب ها کنترل checksum می شوند; شامل نام کاربر، ایمیل و تاریخ  برجسب گذاری هستند; پیام مربوط به برچسب را دارند; و می توان آنها را با GPG (GNU Privacy Guard) علامت گذاری و تایید نمود.

بیشتر پیشنهاد می شود که برچسب های annotated ایجاد کنید تا به همه این داده ها دسترسی داشته باشد; اما اگر تنها یک برچسب موفت و گذرا نیاز دارید و یا به هر روی نباید داده ها ذخیره شوند می توانید از برچسب های lightweight بهره بگیرید.

[[_annotated_tags]]
==== برچسبهای Annotated

(((tags, annotated)))
ساخت یک برچسب Annotated در گیت بسیار ساده است.
ساده ترین راه افزدون `-a` هنگام اجرای دستور `tag` می باشد:(((git commands, tag)))

[source,console]
----
$ git tag -a v1.4 -m "my version 1.4"
$ git tag
v0.1
v1.3
v1.4
----

`-m` مشخص گننده پیام برچسب است، که با برچسب ذخیره خواهد شد.
اگر پیامی برای یک برچسب annotated مشخص نکنید گیت ویرایش پیش فرض را اجرا کرده و شما می توانید آنجا نوشتن را بیاغازید.

داده های برچسب را میتوانید در همان ثبت برچسب گذاری شده با دستور `git show` ببینید.

[source,console]
----
$ git show v1.4
tag v1.4
Tagger: Ben Straub <ben@straub.cc>
Date:   Sat May 3 20:19:12 2014 -0700

my version 1.4

commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    Change version number
----

این دستور داده های کاربر برچسب گذار، تاریخ برچسب 
گذاری و پیام مربوط به برچسب را پیش ا ز داده های ثبت مربوطه نشان می دهد.

==== برچسب های Lightweight

(((tags, lightweight)))
راه دیگری برای برچسب گذاری ثبت ها برچسب lightweight است.
این برچسب تنها checksum مربوط به ثبت است که در یک فایل ذخیره می شود -- اطلاعات دیگری نگه داشته نمیشود.
برای ساخت یک برچشب lightweight، هیچکدام از گزینه های `-a`، `-s`، یا `-m` را بکار نگیرید، تنها نام برچسب را وارد نمایید.

[source,console]
----
$ git tag v1.4-lw
$ git tag
v0.1
v1.3
v1.4
v1.4-lw
v1.5
----

اکنو اگر `git show` را بر روی یک برچسب اجرا کنید، داده های بیشتری از برچسب را نخواهید دید.(((git commands, show)))
این دستور تنها ثبت را نشان خواهد:

[source,console]
----
$ git show v1.4-lw
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    Change version number
----

==== برچسب گذاری با تاخیر

همچینین می توانید بعد از چند ثبت،ثبت های پیشین را برچسب گذاری کتید.
فرض کنید تاریخچه ی برچسب های شما شبیه این باشد:

[source,console]
----
$ git log --pretty=oneline
15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
a6b4c97498bd301d84096da251c98a07c7723e65 Create write support
0d52aaab4479697da7686c15f77a3d64d9165190 One more thing
6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'
0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc Add commit function
4682c3261057305bdd616e23b64b0857d832627b Add todo file
166ae0c4d3f420721acbb115cc33848dfcc2121a Create write support
9fceb02d0ae598e95dc970b74767f19372d61af8 Update rakefile
964f16d36dfccde844893cac5b347e7b3d44abbc Commit the todo
8a5cbc430f1a9c3d00faaeffd07798508422908a Update readme
----

حال فرض کنید که فراموش کرده‌اید که پروژه را وقتی که در v1.2 و در کامیت ``Update rakefile'' بود تگ‌گذاری کنید.
پس از ثبت می‌توانید این کار را انجام دهید.
برای تگ کردن آن کامیت می‌توانید چک‌سام (یا بخشی از چک‌سام) آن کامیت را در پایان دستور مشخص کنید:

[source,console]
----
$ git tag -a v1.2 9fceb02
----

می بینید که ثبت مورد نظر برچسب گذاری شده است:(((git commands, tag)))

[source,console]
----
$ git tag
v0.1
v1.2
v1.3
v1.4
v1.4-lw
v1.5

$ git show v1.2
tag v1.2
Tagger: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Feb 9 15:32:16 2009 -0800

version 1.2
commit 9fceb02d0ae598e95dc970b74767f19372d61af8
Author: Magnus Chacon <mchacon@gee-mail.com>
Date:   Sun Apr 27 20:43:35 2008 -0700

    Update rakefile
...
----

[[_sharing_tags]]
==== اشتراک گذری برجسب ها

دستور `git push` برچسب ها را به صورت پیش فرض به سرور منتقل نمی کند.(((git commands, push)))
شما باید برچسب ها را پس از ساخت و ایجاد آنها، مستقلا انتقال دهید.
این فرآیند دقیقا شبیه انتقال و انتشار شاخه هاست -- شما می توانید دستور `git push origin <tagname>` را بکار ببرید.

[source,console]
----
$ git push origin v1.5
Counting objects: 14, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (12/12), done.
Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, done.
Total 14 (delta 3), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.5 -> v1.5
----


اگر برچسب های زیادی دارید که میخواهید همه را یکجا به سرور منتقل کنید، می توانید از گزینه `--tags` در دستور `git push` استفاده نمایید.
این دستور تمام برچسب هایی را که در سرور نیستند به سرور منتقل خواهد کرد.

[source,console]
----
$ git push origin --tags
Counting objects: 1, done.
Writing objects: 100% (1/1), 160 bytes | 0 bytes/s, done.
Total 1 (delta 0), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.4 -> v1.4
 * [new tag]         v1.4-lw -> v1.4-lw
----

اینک اگر کسی دیگر از مخزن ما نمونه برداری کرد یا تنها ثبت ها را فراخوانی و بارگزاری کرد، تمام برجسب ها را نیز دریافت خواهد نمود.

[NOTE]
.`git push` pushes both types of tags
====
Pushing tags using `git push <remote> --tags` does not distinguish between lightweight and annotated tags; there is no simple option that allows you to select just one type for pushing.
====

==== Deleting Tags

To delete a tag on your local repository, you can use `git tag -d <tagname>`.
For example, we could remove our lightweight tag above as follows:

[source,console]
----
$ git tag -d v1.4-lw
Deleted tag 'v1.4-lw' (was e7d5add)
----

Note that this does not remove the tag from any remote servers.
There are two common variations for deleting a tag from a remote server.

The first variation is `git push <remote> :refs/tags/<tagname>`:

[source,console]
----
$ git push origin :refs/tags/v1.4-lw
To /git@github.com:schacon/simplegit.git
 - [deleted]         v1.4-lw
----

The way to interpret the above is to read it as the null value before the colon is being pushed to the remote tag name, effectively deleting it.

The second (and more intuitive) way to delete a remote tag is with:

[source,console]
----
$ git push origin --delete <tagname>
----

==== Checking out Tags

اگر می‌خواهید نسخه‌هایی از فایل‌هایی که یک تگ به آنها اشاره دارد را ببینید، کافیست که یک `git checkout` از آن تگ انجام دهید؛ اگرچه این دستور مخزن شما را در حالت ``detached HEAD'' قرار می‌دهد که عوارض جانبی نامطلوبی دارد:
>>>>>>> master

[source,console]
----
$ git checkout 2.0.0
Note: checking out '2.0.0'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch>

HEAD is now at 99ada87... Merge pull request #89 from schacon/appendix-final

$ git checkout 2.0-beta-0.1
Previous HEAD position was 99ada87... Merge pull request #89 from schacon/appendix-final
HEAD is now at df3f601... Add atlas.json and cover image
----

در حالت ``detached HEAD''، اگر تغییراتی ایجاد کنید و سپس آنها را کامیت کنید، تگ به همان صورت باقی خواهند ماند اما کامیت شما به هیچ برنچی تعلق نخواهد گرفت و غیرقابل دسترس خواهد بود مگر اینکه به وسیله هش کد به آن دسترسی پیدا کنید.
بنابراین اگر می‌خواهید تغییراتی اعمال کنید -- ثرض کنیم می‌خواهید مشکلی را از یک نسخه قدیمی برطرف کنید -- احتمالاً خواهید خواست که یک برنچ هم برایش بسازید:

[source,console]
----
$ git checkout -b version2 v2.0.0
Switched to a new branch 'version2'
----

با اجرای دستور بالا، اگر یک ثبت تازه ایجاد نمودید، شاخه ی `version2` اندکی متفاوت از برچسب `v2.0.0` خواهد بود. تا زمانی که با تغییرات جدید در این شاخه به پیش می رود. پس مرافب باشید.
