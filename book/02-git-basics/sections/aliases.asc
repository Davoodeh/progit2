[[_git_aliases]]
=== نام های مستعار در گیت

(((aliases)))
Before we finish this chapter on basic Git, there's just one little tip that can make your Git experience simpler, easier, and more familiar: aliases.
We won't refer to them or assume you've used them later in the book, but you should probably know how to use them.

گیت توانایی پی بردن خودکار به دستورات نیمه نوشته را ندارد.
 اگر می خواهید فقط بخشی از یک دستور را تایپ کنید و گیت آن را بشناسد، به سادگی می توان یک نام مستعار با دستور 
`git config`.(((git commands, config))) بسازید.
برای ساخت نام مستعار، در اینجا چند مثال می آورید:

[source,console]
----
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
----

یعنی به جای نوشتن دستور  `git commit`, دستور `git ci` بسنده می کند.
همین طور که با گیت کار می کنید، شاید دستوری دیگر را بسیار تکرار کنید; با خیال آسوده نامهای مستعار بسازید.

This technique can also be very useful in creating commands that you think should exist.
For example, to correct the usability problem you encountered with unstaging a file, you can add your own unstage alias to Git:

[source,console]
----
$ git config --global alias.unstage 'reset HEAD --'
----

This makes the following two commands equivalent:

[source,console]
----
$ git unstage fileA
$ git reset HEAD -- fileA
----

This seems a bit clearer.
It's also common to add a `last` command, like this:

[source,console]
----
$ git config --global alias.last 'log -1 HEAD'
----

This way, you can see the last commit easily:

[source,console]
----
$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel <dreamer3@example.com>
Date:   Tue Aug 26 19:48:51 2008 +0800

    test for current head

    Signed-off-by: Scott Chacon <schacon@example.com>
----

As you can tell, Git simply replaces the new command with whatever you alias it for.
However, maybe you want to run an external command, rather than a Git subcommand.
In that case, you start the command with a `!` character.
This is useful if you write your own tools that work with a Git repository.
We can demonstrate by aliasing `git visual` to run `gitk`:

[source,console]
----
$ git config --global alias.visual '!gitk'
----
