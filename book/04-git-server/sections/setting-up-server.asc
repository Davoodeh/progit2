[[_setting_up_server]]
=== نصب و راه‌اندازی سرور

اجازه بدید تا جلوتر بریم و دسترسی SSH به سرور را فراهم کنیم.
در این مثال شما از متد `authorized_keys` برای تصدیق هویت کاربرانتان استفاده خواهید کرد.
همچنین ما تصور می‌کنیم که از یک توزیع استاندارد لینوکسی مانند ابونتو استفاده می‌کنید.

[NOTE]
====
به جای کپی و نصب کلیدهای عمومی  به صورت دستی با استفاده از دستور `ssh-copy-id` می‌توانید بخش زیادی از کار را خودکار انجام دهید.
====

اول یک حساب کاربری `git` می‌سازید و یک پوشه `ssh.` برای همان کاربر.

[source,console]
----
$ sudo adduser git
$ su git
$ cd
$ mkdir .ssh && chmod 700 .ssh
$ touch .ssh/authorized_keys && chmod 600 .ssh/authorized_keys
----

بعد از آن، لازم است که چند کلید عمومی SSH توسعه‌دهنده را به فایل `authorized_keys` برای کاربر `git` اضافه کنید.
فرض کنید شما چند کلید عمومی قابل اعتماد دارید و آن را در فایل‌های موقتی ذخیره کرده‌اید.
توجه کنید، کلید عمومی چیزی شبیه به این است:

[source,console]
----
$ cat /tmp/id_rsa.john.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4L
ojG6rs6hPB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4k
Yjh6541NYsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9Ez
Sdfd8AcCIicTDWbqLAcU4UpkaX8KyGlLwsNuuGztobF8m72ALC/nLF6JLtPofwFBlgc+myiv
O7TCUSBdLQlgMVOFq1I2uPWQOkOWQAHukEOmfjy2jctxSDBQ220ymjaNsHT4kgtZg2AYYgPq
dAv8JggJICUvax2T9va5 gsg-keypair
----

شما فقط آن را به فایل `authorized_keys` در پوشه `ssh.` برای همان کاربر `git` اضافه می‌کنید:

[source,console]
----
$ cat /tmp/id_rsa.john.pub >> ~/.ssh/authorized_keys
$ cat /tmp/id_rsa.josie.pub >> ~/.ssh/authorized_keys
$ cat /tmp/id_rsa.jessica.pub >> ~/.ssh/authorized_keys
----

حالا می‌توانید با اجرای دستور `git init` همراه آپشن `bare--` یک مخزن خالی برای آن‌‌ها راه‌اندازی کنید که درواقع یک مخزن بدون پوشه کاری
راه‌اندازی اولیه می‌کند:(((git commands, init, bare)))

[source,console]
----
$ cd /srv/git
$ mkdir project.git
$ cd project.git
$ git init --bare
Initialized empty Git repository in /srv/git/project.git/
----

سپس، John, Josie, یا Jessica می‌توانند اولین نسخه از پروژه خود را به آن مخزن پوش کنند.
دقت کنید که هر زمان که بخواهید پروژه جدیدی بسازید حتما شخصی باید دستورات شل را در آن ماشین اجرا کند و یک مخزن `bare` بسازد.
حالا بیایید از `gitserver` به عنوان نام سروری که کاربر و مخزن `git` را راه‌اندازی کردیم استفاده کنیم.
اگر آن را به صورت داخلی اجرا می‌کنید و برای اشاره به آن سرور برای `gitserver` یک DNS راه‌اندازی میکنید، پس می‌توانید از دستورات
همانگونه که هستند استفاده کنید( با فرض اینکه پروژه `myproject` به همراه فایل‌هایش موجود است ).


[source,console]
----
# on John's computer
$ cd myproject
$ git init
$ git add .
$ git commit -m 'Initial commit'
$ git remote add origin git@gitserver:/srv/git/project.git
$ git push origin master
----

در اینجا،‌دیگران می‌توانند به راحتی کلون کنند یا تغییرات لازم را به سرور پوش کنند:

[source,console]
----
$ git clone git@gitserver:/srv/git/project.git
$ cd project
$ vim README
$ git commit -am 'Fix for README file'
$ git push origin master
----

با این متد شما سریعا می‌توانید سرور گیتی با قابلیت خواندن/نوشتن راه‌اندازی کنید و آن برای در اختیار توسعه‌دهندگان قرار دهید.

شما باید به این نکته توجه کنید که در حال حاضر تمامی کاربران می‌توانند به داخل سرور ورود کنند و به عنوان کاربر `git` شل را در دست بگیرند.
اگر می‌خواهید از این موضوع جلوگیری کنید، شما می‌بایست متغییر  شل را در دخل مسیر `etc/passwd/` به چیز دیگری تغییر دهید.

شما به سادگی می‌توانید حساب کاربر `git` را فقط به فعالیت‌های مربوط به گیت محدود کنید؛ با استفاده از ابزار محدود کننده شل به نام `git-shell`
این کار امکان پذیر است.
اگر شما این محدودیت را فعال کنید، پس از آن حساب کاربری `git` نمی‌تواند دسترسی معمولی به سرور شما داشته باشد.
برای استفاده از این محدودیت به جای مقدار `bash` یا `csh` یا `zsh` باید از مقداری به نام `git-shell` برا آن حسابی که به شل ورود می‌کند
استفاده کنید.

ابتدا مسیر کامل `git-shell` را وارد کنید اگر در حال حاضر مسیر ابزار در آنجا وجود ندارد.‍

[source,console]
----
$ cat /etc/shells   # see if git-shell is already in there. If not...
$ which git-shell   # make sure git-shell is installed on your system.
$ sudo -e /etc/shells  # and add the path to git-shell from last command
----

حالا می‌توانید با استفاده از `chsh <username> -s <shell>` می‌توانید شل هر کاربر را تغییر دهید.

[source,console]
----
$ sudo chsh git -s $(which git-shell)
----

در این لحظه کاربر `git` همچنان دسترسی SSH دارد و قابلیت پوش و پول از مخزن گیت را نیز دارد اما نمی‌تواند در سرور از دستورات دیگر شل
استفاده کند.
اگر یکبار امتحان کنید، پیغام رد درخواستی مانند پیغام پایین را مشاهده خواهید کرد:

[source,console]
----
$ ssh git@gitserver
fatal: Interactive git shell is not enabled.
hint: ~/git-shell-commands should exist and have read and execute access.
Connection to gitserver closed.
----

در حال حاضر، کاربران همچنان می‌توانند از پورت SSH به هر سرورگیتی که میزبانی می‌شود و قابل جست‌جو باشد دسترسی داشته باشند.
اگر می‌خواهید از این موضوع جلوگیری کنید می‌توانید فایل `authorized_keys` را اصلاح کنید و آپشن زیر را برای هر کدام از کلید‌هایی که
می‌خواهید از دسترسی آن جلوگیری شود استفاده کنید.

[source,console]
----
no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty
----

نتیجه کار باید چیزی شبیه به این باشد:

[source,console]
----
$ cat ~/.ssh/authorized_keys
no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa
AAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4LojG6rs6h
PB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4kYjh6541N
YsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9EzSdfd8AcC
IicTDWbqLAcU4UpkaX8KyGlLwsNuuGztobF8m72ALC/nLF6JLtPofwFBlgc+myivO7TCUSBd
LQlgMVOFq1I2uPWQOkOWQAHukEOmfjy2jctxSDBQ220ymjaNsHT4kgtZg2AYYgPqdAv8JggJ
ICUvax2T9va5 gsg-keypair

no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa
AAAAB3NzaC1yc2EAAAADAQABAAABAQDEwENNMomTboYI+LJieaAY16qiXiH3wuvENhBG...
----

حالا شبکه دستورات همچنان به خوبی کار خواهند کرد اما کاربران قادر به داشتن پوسته شل نیستند.
به توجه به وضعیت خروجی، شما می‌توانید یک پوشه درون پوشه `git` کاربر بسازید و دستورات `git-shell` را طبق خواسته خود سفارشی سازی کنید.
برای مثال، میتوانید دستوراتی که سرور قرار است قبول کند را محدود کنید یا می‌توانید پیامی که کاربر در صورت استفاده از SSH می‌بیند را
سفارشی سازی کنید.
برای اطلاعات بیشتر درمورد سفارشی سازی دستورات شل-گیت دستور `git help shell` را اجرا کنید.(((git commands, help)))
