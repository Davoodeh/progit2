[[_getting_git_on_a_server]]
=== راه‌اندازی گیت در سرور

حالا در این بخش درباره راه‌اندازی یک سرور گیت و اجرا پروتکل‌ها می‌خوانیم.

[NOTE]
====
ما در اینجا مراحل اولیه و ساده نصب و راه‌اندازی بر روی سرور مبتنی بر لینوکس را یاد خواهیم گرفت. در هر حال راه‌اندازی
این سرویس‌ها بر روی مک و ویندوز نیز امکان پذیر هستند.
در واقع راه‌اندازی چنین سروری در سیستم‌های شما از نظر ابزاری و امنتی مشکلات و تفاوت‌های زیادی خواهد داشت اما در هر صورت
هدف ما، یک ایده‌ی کلی درباره راه‌اندازی سرور گیت است.
====

برای راه‌اندازی اولیه هر سرور گیت، باید یک مخزن موجود را به یک مخزن خالی یا «bare» تبدیل کنیم -- «bare» مخزنی که درونش هیچ `working directory` نباشد.
این کار بسیار ساده است.
برای اینکه مخزن خود را کلون کنید و یک مخزن «bare» جدید بسازید، دستور `clone` را با آپشن `bare--` اجرا می‌کنیم
.(((git commands, clone, bare)))
به طور قرار دادی، نام‌های پوشه مخزن «bare» با پسوند `git.` تمام می‌شود،‌ به این صورت:

[source,console]
----
$ git clone --bare my_project my_project.git
Cloning into bare repository 'my_project.git'...
done.
----

در حال حاضر شما باید یک کپی از اطلاعات پوشه گیت در پوشه `my_project.git` داشته باشید.

تقریبا چیزی شبیه به این:

[source,console]
----
$ cp -Rf my_project/.git my_project.git
----

مقدار کمی تفاوت‌های جزئی در پیکربندی فایل وجود دارد اما برای هدف شما این کلون همان چیز است.
خودش مخزن گیت را همراه دارد؛ بدون پوشه کاری و یک پوشه به طور مشخص، تنها برای آن می‌سازد.

[[_bare_repo]]
==== قرار دادن مخزن بِر در سرور

حالا که شما یک کپی بِر از مخزنتان را دارید،‌ تمام کاری باید انجام دهید این است که آن را در یک سرور قرار دهید و
پروتکل‌های خودتان را نصب و راه اندازی کنید.
بیایید بگوییم شما سروری با نام `git.example.come` را نصب و راه‌اندازی کردید که به آن دسترسی SSH هم دارید و بعد می‌خواهید تمام مخزن‌های
گیت خود را زیر پوشه `srv/git/` ذخیره کنید.
فرض کنیم پوشه `srv/git/` در سرور وجود دارد، شما می‌توانید مخزن جدید خود را با کپی کردن مخزن بِر راه‌اندازی کنید:

[source,console]
----
$ scp -r my_project.git user@git.example.com:/srv/git
----

در این لحظه، دیگر کاربران که دسترسی خواندن SSH به پوشه `srv/git/` در آن سرور را دارند می‌توانند مخزن را کلون کنند؛
با استفاده از دستور زیر:

[source,console]
----
$ git clone user@git.example.com:/srv/git/my_project.git
----

اگر یک کاربر با SSH به سرور ورود کند و دسترسی نوشتن به پوشه `srv/git/my_project.git/` داشته باشد، به طور خودکا دسترسی «پوش» نیز دارد.

اگر شما دستور `git init` را با آپشن `shared--` اجرا کنید،‌ گیت به طور خودکار گروه دسترسی‌های نوشتن را به مخزن اضافه خواهد کرد.
به یاد داشته باشید که با اجرای این دستور، شما هیچ کامیت یا هیچ‌چیز دیگری را نابود نخواهید کرد.(((git commands, init, bare)))

[source,console]
----
$ ssh user@git.example.com
$ cd /srv/git/my_project.git
$ git init --bare --shared
----

حالا می‌بینید که گرفتن یک مخزن گیت، ساخت نسخه‌ بِر و قرار دادن آن روی سرور تا شما و مشارکت‌ کنندگان به آن دسترسی داشته باشید؛ چقدر ساده است.
حالا آماده هستید تا بر روی یک پروژه مشارکت کنید.

خیلی مهم است که دقت کنید که این به معنای واقعی کلمه تمام چیزی هست که شما نیاز دارید تا یک سرور گیت مفید را راه‌اندازی کنید که
چندین کاربر به آن دسترسی دارند -- فقط حساب‌هایی با قابلیت ‌‌SSH به سرور اضافه کنید و مخزن بِر را جایی بگذارید تا همه‌ی کاربران دسترسی
خواندن و نوشتن به آن داشته. حالا شما آماده کار هستید -- همین و بس.

در چند قسمت بعدی، خواهید دید که نحوه گسترش راه‌اندازی‌های پیچیده چگونه است.
این بحث شامل ساخت حساب‌های کاربری به ازای هر کاربر، اضافه کردن دسترسی خواندن عمومی به مخزن‌ها، راه‌اندازی رابط‌های کاربری وب
و بیشتر خواهد بود.

با این حال، یادتان باشد که _تمام_ چیزی که نیاز دارید برای مشارکت با تعدادی کمی از افراد بر روی یک پروژه خصوصی،
یک مخزن بِر و سرور SSH است.

==== راه‌اندازی کوچک

اگر شما گروه کوچکی هستید یا فقط تصمیم دارید در سازمانتان گیت راه بیاندازید و تعداد کمی توسعه دهنده یا برنامه‌نویس دارید،
خیلی‌ چیزها میتواند برای شما آسان شود.
یکی از پیچیده‌ترین بخش‌های خاص راه‌اندازی سرور گیت مدیریت کاربران‌ آن است.
اگر شما بخواهید بعضی از مخزن‌ها، برای کاربران مشخصی فقط خواندنی باشند و بقیه نوشتنی/خواندنی، مدیریت و تعیین دسترسی و سطح‌ دسترسی‌ها
می‌تواند کمی سخت شود.

===== دسترسی SSH

(((serving repositories, SSH)))

اگر سروری دارید که همه‌ی توسعه‌ دهندگان شما دسترسی SSH دارند، به طور کلی این راحت‌ترین راه‌اندازی برای اولین مخزن شماست، چرا که
تقریبا شما هیچ‌کاری نباید انجام دهید (همانطور که ما در بخش آخر درباره آن گفته بودیم).
اگر انواع مجوز‌های کنترل دسترسی پیچیده‌تر بر روی مخزنتان می‌خواهید، می‌توانید آن‌ها را به وسیله مجوز‌های فایل‌سیستم در سیستم‌عامل سرور خود
کنترل کنید.

اگر می‌خواهید مخزنتان را در سروری قرار دهید که هیچ حساب کاربری برای هیچ‌یک از تیم شما و برای هرکسی که می‌خواهید به آن دسترسی نوشتن اعطا کنید،
فقط باید برای آن دسترسی SSH راه‌اندازی کنید.

ما فرض می‌کنیم که اگر شما سروری دارید که با آن این کار را کنید، شما از قبل سرور SSH نصب شده دارید و این راهی است که به سرور دسترسی دارید.

چندین راه دیگر وجود دارد که می‌تواند اجازه دسترسی به هر شخصی که در تیم شماست دهد.
اول راه‌اندازی حساب‌های کاربری برای همه‌ است که راه درستی است اما زحمتش زیاد است.
احتمالا نمی‌خواهید هربار دستور `adduser` (یا دستور جایگزین احتمالی `useradd`) را اجرا کنید و رمزهای عبور موقتی را اجبارا برای هر کاربر جدید بسازید.

دومین متد ساخت فقط یک حساب «git» بر روی ماشین است، از هر کاربری که دسترسی نوشتن دارد بخواهید که اجبارا کلید عمومی SSH را به شما ارسال کند
و آن کلید را به مسیر و فایل `ssh/autorized_keys./~` که برای آن حساب جدید «git» است ببرید و اضافه کنید.
در آن لحظه، همه قادر به دسترسی به آن ماشین به وسیله همان اکانت «git» هستند.
این کار هیچ تاثیری بر روی اطلاعات کامیت؛ به هیچ وجه نخواهد داشت -- کاربر SSH که از طریق آن متصل هستید هیچ تاثیری بر کامیت‌هایی که شما
ضبط کردید نمی‌گذارد.

راه دیگری که می‌توانید انجام دهید این است که دسترسی SSH را داشته باشید و آن را از یک سرور LDAP تصدیق هویت کنید یا
دیگر تصدیق‌ هویت متمرکزی که شاید از قبل راه‌اندازی کردید.
تا زمانی که هر کاربر بتواند به ماشین دسترسی shell بگیرد، هر مکانیزم تصدیق هویت SHH دیگری که می‌توانید به آن فکر کنید باید کار کند.
