=== پروتکل‌ها

گیت برای جابه‌جایی اطلاعات از چهار پروتکل متفاوت استفاده میکند:Local, HTTP, SSH و گیت.
ما در اینجا درباره اینکه این پروتکل‌ها چی هستند بحث‌ خواهیم کرد و اینکه در کدامین یک از موقعیت‌های پایه‌ای می‌خواهید از آن‌ها استفاده
یا استفاده نکنید.

==== پروتکل Local

(((protocols, local)))

ابتدایی‌‌ترین پروتکل، «Local پروتکل» است، که مخزن‌‌های ریموتی هستند که همان سیستم میزبان ولی در پوشه‌ی دیگری هستند.
اکثرا از این پروتکل اگر شخصی در تیم شما به یک فایل سیستم مونت شده دسترسی دارد استفاده می‌شود یا بعضی وقتا که افراد
در یک کامپیوتر وارد می‌شوند. خب موقعیت دوم زیاد ایده‌آل نخواهد بود،‌چون تمام نمونه‌ مخزن کد‌های شما در یک کامپیوتر اجرا
تغییر میابند،‌ خیلی بیشتر شبیه یک فاجعه است.

اگه یک فایل سیستم مونت شده دارید که به اشتراک گذاشته‌اید، پس می‌توان از کلون ساخت، بر آن پوش کرد، و اطلاعات را از مخزن بر پایه
فایل را پول کرد.
برای کلون کردن چنین مخزنی، یا برای اضافه کردن آن به عنوان ریموت به یک پروژه موجود، از آدرس آن در حافظه به جای آدرس اینترنتی
استفاده کنید.
برای مثال، برای کلون کردن یک مخزن لوکال، می‌توانید این چنین عمل کنید:

[source,console]
----
$ git clone /srv/git/project.git
----

یا می‌توانید این کار را کنید:

[source,console]
----
$ git clone file:///srv/git/project.git
----

اگر در شروع آدرس `//:file` را صراحتا مشخص کنید، گیت کاملا عمل‌کرد متفاوتی خواهد داشت.
اگر فقط مسیر را مشخص کنید، گیت سعی می‌کند از لینک‌ سخت یا مستقیم برای کپی فایل‌های مورد نیازش استفاده کنید.
دلیل اصلی که از پیشوند `//:file` مشخص میکنیم برای وقتی است که شما یک کپی کامل از مخزن با منابع خارجی و اشیا به جا مانده‌ است --
به طور کلی بعد ایمپورت کردن از یک کنترل نسخه‌ دیگر یا چنین چیزی.
(see <<ch10-git-internals#ch10-git-internals>> for maintenance tasks).
ما از آدرس مسیر معمولی در اینجا استفاده خواهیم کرد چون این کار تقریبا همیشه سریعتر است.

برای اضافه کردن یک مخزن به یک پروژه گیت موجود، می‌توانید از چنین دستوری استفاده کنید:

[source,console]
----
$ git remote add local_proj /srv/git/project.git
----

سپس، می‌توانید فعل پوش یا پول را از ریموت خود با نام جدید ریموتتان `local_proj` همانطور که تصور می‌کردید در یک شبکه انجام دهید.

===== مزایا

مزایا مخزن‌های مبتنی بر فایل سادگی و استفاده از مجوز‌های فایل موجود و دسترسی شبکه است.
اگر شما از قبل فایل سیستم‌های اشتراک شده داشته باشید که همه‌ی تیم به آن دسترسی دارند،‌ راه‌اندازی یک مخزن بسیار ساده است.
شما کپی یک مخزن «بِر» را جایی که همه دسترسی اشتراک به آن را دارند می‌گذارید و مجوزهای خواندن/نوشتن را همانطور که تمایل دارید
برای دیگر پوشه‌های اشتراک گذاری شده تعیین می‌کنید.
ما درباره این که چگونه کپی یک مخزن بِر را به این منظور بیرون بکشید در بخش <<ch04-git-on-the-server#_getting_git_on_a_server>> بحث کرده‌ایم.

این حتی یک گزینه قشنگ برای  برداشتن سریع کار از مخزن کاری شخص دیگری است.
اگر شما و همکارتان در حال کار بر روی یک پروژه هستید و او از شما می‌خواهد که چیزی را بررسی کنید، اجرای دستوری
مثل `git pull /home/john/project` گاهی خیلی راحت‌تر از این است که آن را به سرور ریموت پوش کنید و متعاقبا آن‌ها را از سرور ریموت فچ کنید.

===== معایب

معایت این متد این است که دسترسی اشتراکی به طور کلی از نظر راه‌اندازی و دسترسی از چندین موقعیت به واسطه دسترسی شبکه سخت‌تر است.
اگر بخواهید از یک لپ‌تاپ زمانی که خانه هستید به آن پوش کنید، باید دیسک ریموت را «مونت» کنید که می‌تواند کمی سخت باشد و در مقایسه با
دسترسی برمبنای شبکه کند‌ باشد.

مهم است اشاره کرد که اگر شما در حال استفاده از مونت اشتراک گذاری شده خاصی هستید این لزوما سریع‌ترین گزینه نیست.
یک مخزن لوکال زمانی سریع است که دسترسی سریع به آن داشته باشید.
یک مخزن بر روی NFS گاها کندتر از یک مخزن بر روی همان سرور اما به واسطه SSH است، به گیت اجازه می‌دهد بر روی هر سیستم به صورت غیر لوکال
اجرا شود.

در نهایت، این پروتکل از مخزن در برابر آسیب‌ تصادفی محافظت نخواهد کرد.
هر کابری دسترسی شل کامل  به پوشه «ریموت» دارد و هیچ جلوگیری از تغییر یا حذف فایل‌های درونی گیت و از پاشیدن مخزن وجود ندارد.

==== پروتکل‌های HTTP

گیت می‌تواند از طریق HTTP با استفاده از دو حالت متفاوت ارتباط برقرار کند.
پیش از گیت ۱.۶.۶، فقط یک راه وجود داشت که این کار را انجام می‌داد که بسیار ساده به طور کلی فقط-خواندی بود.
در نسخه ۱.۶.۶، پروتکل جدید و هوشمند‌تری معرفی شد که گیت را قادر می‌ساخت تا هوشمندانه بر سر انتقال اطلاعات مذاکره کند همانند کاری
SSH انجام می‌دهد.
در چند سال اخیر، این نوع جدید از پروتکل HTTP از وقتی برای کاربر ساده‌تر شده و درباره نحوه ارتباطاتش هوشمند‌تر شده است، بسیار محبوب شد.
نسخه جدیدتر را گاها پروتکل HTTP «هوشمند» و نسخه قدیمی‌تر را HTTP «غیر هوشمند» می‌نامند.
ما اول درباره پروتکل جدیدتر می‌گوییم.

===== HTTP هوشمند

(((protocols, smart HTTP)))
پروتکل HTTP هوشمند بسیار شبیه به SSH یا پروتکل‌های گیت عمل می‌کند اما بر بستر استاندارد درگاه‌های HTTPS و می‌تواند از مکانیزم‌های گوناگون
تصدیق هویت HTTP استفاده کند، به این معناست که این برای کاربر از چیزی مثل SSH راحت‌تر است، به طوری که شما می‌توانید از چیز‌هایی مانند
نام‌ کاربری/رمز‌عبور برای تصدیق هویت استفاده کنید تا اجبارا کلید‌های SSH را راه‌اندازی کنید.

احتمالا در حال حاضر این محبوب‌ترین راه برای استفاده از گیت است، از آنجا که می‌تواند رو هر دو سرور مانند پروتکل `git://` ناشناس
راه‌اندازی شود و همچنین می‌تواند همراه تصدیق هویت و رمزگذاری شده مانند پروتکل SSH پوش شود.
به جای اینکه مجبور باشید چندین آدرس اینترنتی متفاوت برای چنین چیز‌هایی راه‌اندازی کنید می‌توانید؛از یک آدرس اینترنتی برای هر دو استفاده کنید.
اگر سعی کنید که به مخزن پوش کنید و تصدیق هویت ضروری باشد (که طبیعتا هست)، سرور می‌تواند به صورت بلادرنگ از شما نام کاربری و رمزعبور
درخواست کند. همین روند نیز برای دسترسی خواند وجود دارد.

در واقع، برای سرویس‌های مانند گیت‌هاب، آدرس اینترنتی که شما برای نمایش آنلاین مخزن خود استفاده می‌کنید
(برای مثال، https://github.com/schacon/simplegit[]) را می‌توانید برای کلون کردن مخزن نیز استفاده کنید و اگر دسترسی داشته باشید، به آن پوش کنید.

===== HTTP غیر هوشمند

(((protocols, dumb HTTP)))

اگر سرور با پروتکل HTTP هوشمند پاسخ ندهد،‌ کلاینت گیت تلاش می‌کند تا به پروتکل ساده‌تری برگردد و از HTPP غیر هوشمند استفاده می‌کند.
پروتکل غیر هوشمند انتظار دارد که مخزن بِر گیت مانند فایل‌های معمولی از طرف وب سرور مزبانی شود.
قشنگی HTTP غیر هوشمند سادگی راه‌اندازی آن است.
در اصل، تمام کاری که شما باید انجام دهید این است که مخزن بِر گیت را زیر HTTP داکیومنت-روت قرار دهید و قلاب مشخصی برای «بعد از بروزرسانی»
راه‌اندازی کنید و تمام‌ (اینجا را <<ch08-customizing-git#_git_hooks>> ببنید).

[source,console]
----
$ cd /var/www/htdocs/
$ git clone --bare /path/to/git_project gitproject.git
$ cd gitproject.git
$ mv hooks/post-update.sample hooks/post-update
$ chmod a+x hooks/post-update
----

همه‌ی کار همین است.(((hooks, post-update)))
قلاب «بعد از بروزرسانی» که که همراه گیت می‌آید به طور پیش فرض دستورات مناسب را اجرا می‌کند (`git update-server-info`) تا HTTP به درستی
فعل‌های کلون و فچ را انجام دهد.
این دستور زمانی اجرا می‌شود که شما به این مخزن پوش کنید‌ (احتمالا بر بستر SSH)؛ سپس دیگر افراد می‌توانند توسط چنین چیزی کلون کنند

[source,console]
----
$ git clone https://example.com/gitproject.git
----

در این مورد خاص، ما از مسیر `/var/www/htodcs` استفاده می‌کنیم که برای راه‌اندازی آپاچی مرسوم است، اما شما می‌تواند از هر وب سرور ایستا
دیگری استفاده کنید -- فقط مخزن بِر را در آن مسیر قرار دهید.
اطلاعات سرور به عنوان فایل‌های ایستا اصلی میزبانی می‌شوند (در بخش  <<ch10-git-internals#ch10-git-internals>> c اطلاعات بیشتری درباره چگونگی میزبانی گفته شده است.)
عموماً یا مجبور خواهید شد که یک سرور خواندنی/نوشتنی هوشمند HTTP راه‌اندازی کنید
یا صرفاً فایل‌ها را با دسترسی فقط-خواندنی به روش غیرهوشمند فراهم کنید.
استفاده از ترکیب این دو سرویس نادر است.

===== مزایا

ما تمرکزمان را بر روی مزایا نسخه هوشمند پروتکل HTTP خواهیم گذاشت.

سادگی داشتن فقط یک آدرس اینترنتی برای همه‌ی دسترسی‌ها و داشتن سرور پرامپت فقط زمانی به که تصدیق هویت نیازمندید، همه چیز را برای
کاربر نهایی بسیار ساده می‌کند.
قادر بودن به تصدیق هویت با نام کاربری و رمزعبور بر بستر SSH یک مزیت بزرگ است، چرا که کاربران نیاز به ساخت یک کلیدهای عمومی SSH
و آپلود آن‌ها بر روی سرور برای اجازه برقراری تعامل با آن را ندارند.
برای کاربرانی که در سطح بالایی نیستند یا کاربرانی که برایشان SSH کمتر متداول است، این مزیت اصلی در استفاده‌پذیزی است.
همچنین پروتکلی بسیار سریع و کارآمد است همانند پروتکل SSH.

همچنین می‌توانید مخزن‌های فقط-خواندنی خود بر بستر HTTPS نیز میزبانی کنید که به این معنا است شما می‌توانید انتقال محتوا را رمزگذاری کنید؛
یا می‌توانید تا جایی پیش روید که تا مشتری‌ها را مجبور کنید که از یک گواهی SSL امضا شده مشخص استفاده کنند.

نکته قشنگ دیگر این است که HTTP و HTTPS هر دو پروتکل‌های هستند که معمولا مورد استفاده قرار می‌گیرند که فایروال‌های شرکتی اغلب راه‌اندازی می‌شوند
تا اجازه عبور و مرور از طریق پروتکل‌های آن‌ها فراهم شود.

===== معایب

گیت بر بستر HTTPS به مهارت بیشتری برای راه‌اندازی در مقایسه با SSH بر روی بعضی از سرور‌های دارد.
از طرفی فقط مقدار خیلی کمی مزیت وجود دارد که دیگر پروتکل‌ها بیشتر از HTTP هوشمند برای میزبانی محتوای گیت دارند.

اگر از HTTP برای تصدیق هویت پوش کردن استفاده می‌کنید، تهیه اعتبار نامه‌ها گاهی اوقات پیچیده‌تر از استفاده از کلید‌ها بر بستر SSH است.
با این حال چندین ابزار ذخیره‌ساز اعتبار نامه وجود دارد که می‌توانید استفاده کنید که شامل «Keychain access» در سیستم‌عامل مک و
«Credential Manager»‌ در سیستم‌عامل ویندوز است که این مشکل را آسان‌تر کند.
بخش <<ch07-git-tools#_credential_caching>> مطالعه کنید تا چگونه راه‌اندازی ذخیره‌سازی رمزعبور امن بر بستر HTTP بر روی سیستم خودتان را بدانید.

==== پروتکل SSH

(((protocols, SSH)))

وقتی خود‌میزبانی بر بستر SSH است، این پروتکل انتقال اطلاعات برای گیت معمول و متداول است.
به این خاطر است که دسترسی SSH به سرورها از قبل در اکثر جاها راه‌اندازی شده‌اند -- و اگر نشده باشند، کار راحتی است.
همچنین SSH یک پروتکل شبکه تصدیق هویت شده است و چون در همه جا هست، به طور کلی راه‌اندازی و استفاده از آن آسان است.

برای کلون کردن یک مخزن بر بستر SSH، میتوانید آدرس را مانند این `ssh://` مشخص کنید:

[source,console]
----
$ git clone ssh://[user@]server/project.git
----

یا می‌توانید از نگارش علامت گونه کوتا‌ه‌تر برای پروتکل SSH استفاده کنید:

[source,console]
----
$ git clone [user@]server:project.git
----

در هر دو مورد بالا،‌اگر شما نام کاربر دلخواهی تعیین نکنید، گیت کاربری در حال حاضر ورود کرده است با فرضا استفاده می‌کند.

===== مزایا

مزایای استفاده از پروتکل SSH بسیار زیاد است.
اول، SSH نسبتا راه‌اندازی ساده‌ای دارد -- دیمون‌های SSH پیش افتاده هستند،‌ خیلی از مدیریان شبکه تجربه کار با آن را دارند و خیلی از
توزیع‌های سیتم‌عامل همراه آنها راه‌اندازی می‌شوند یا ابزارهایی برای مدیریت آنها دارند.
و اینکه، دسترسی بر بستر SSH امن است -- همه‌ انتقال اطلاعات رمزگذاری شده و تصدیق هویت شده هستند.
در آخر، مانند HTTPS، گیت و پروتکل‌های محلی، ‌SSH نیز کارآمد است، قبل از ارسال اطلاعات تا جایی که ممکن است اطلاعات را فشرده می‌کنیم.

===== معایب

وجه منفی پروتکل SSH این است که از دسترسی ناشناس به مخزن گیت شما پشتیبانی نمی‌کند.
اگر از SSH استفاده می‌کنید، افراد «حتما» باید دسترسی SSH به ماشین شما داشته باشند، حتی در صلاحیت فقط-خواندن؛ این امر باعث می‌شود که SSH
برای پروژه‌های متن باز که شاید افراد بخواهند صرفا مخزن شما را کلون کرده و آن را امتحان کنند مناسب نباشد.
اگر از SSH فقط در شبکه شرکتی استفاده می‌کنید، شاید SSH تنها پروتکلی باشد که شما لازم دارید با آن سروکار داشته باشد.
اگر می‌خواهید دسترسی ناشناس فقط-خواندن به پروژها بدهد و همچنان از SSH استفاده کنید، شما باید SSH را طوری راه‌اندازی کنید که شما بتوانید
به آن پوش کنید و در غیر این صورت دیگران از فچ کنند.

==== پروتکل گیت

(((protocols, git)))

در اخر، پروتکل گیت را داریم.
یک دیمون خاص است که همراه گیت می‌آید؛ بر روی پورت اختصاصی (۹۴۱۸) گوش می‌کند که یک سرویس شبیه به پروتکل SSH را فراهم می‌کند،
اما با بدون هیچ تصدیق هویتی.
برای سفارش یک مخزن که بر بستر پروتکل گیت میزبانی شود،‌ شما باید یک فایل `git-daemon-export-ok` بسازید --
یا مخزن گیت در دسترس همه برای کلون کردن است یا نیست.
این بدین معناست که فعل پوش بر بستر این پروتکل وجود ندارد.
شما می‌توانید دسترسی پوش را فعال کنید اما، با توجه به نبود تصدیق هویت، هر کسی در اینترنت که آدرس اینترنتی پروژه شما را پیدا کند
می‌تواند به آن پروژه پوش کند.
این کار و این اتفاق نادر است.

===== مزایا

پروتکل گیت اغلب سریعترین پروتکل موجود شبکه است.
اگر حجم عظیمی از ترافیک را برای پروژه عمومی یا یک پروژه بزرگ که نیاز به تصدیق هویت کاربر برای دسترسی خواندن ندارد را میزبانی می‌کنید
به نظر می‌رسد که شما می‌خواهید یک دیمون گیت را برای میزبانی پروژتان راه‌اندازی کنید.
از همان مکانیزم انتقال-اطلاعاتی که پروتکل SSH دارد استفاده می‌کند اما بدون رمزگذاری و تصدیق هویت.

===== معایب

نقطه ضعف پروتکل گیت نداشتن تصدیق هویت است.
اصلا مطلوب نیست که پروتکل گیت تنها راه دسترسی به پروژه شما باشد.
به طور کل، آن را با پروتکل SSH یا HTTPS جفت خواهید کرد برای تعدادی از توسعه‌ دهندگان یا برنامه‌نویسان که دسترسی پوش (نوشتن) و
برای بقیه با استفاده از `git://` که دسترسی فقط-خواندن را ایجاد می‌کند استفاده کنید.
شاید یکی از سخت‌ترین پروتکل‌ها برای راه‌اندازی است.
باید روی دیمون خودش اجرا شود که نیازمند پیکربندی `systemd` و `xinetd` یا چنین چیزی که همیشه شبیه قدم زدن در پارک نخواهد بود.
همچنین نیازمند دسترسی فایروال به پورت ۹۴۱۸ دارد، که چون یک پورت استاندارد نیست شاید فایر‌وال‌های شرکتی همیشه اجازه ندهند.
پشت فایروال‌های شرکتی بزرگ، پورت‌های ناامن این چنینی معمولا مسدود می‌شوند.
