===  Http هوشمند

(((serving repositories, HTTP)))

حالا ما از طریق SSH و `//:git` تصدیق هویت انجام دادیم، اما پروتکل دیگری هم وجود دارد که می‌توانید به طور همزمان استفاده کنید.
راه‌اندازی HTTP هوشمند به طور کل به وسیله‌ی فعال‌سازی یک اسکریپت CGI است که نام آن `git-http-backend` است و گیت آن را برای شما
بر روی سرور فراهم می‌کند.(((git commands, "http-backend")))
اسکرپیت CGI، مسیر و هدری را می‌خواند که با `git fetch` یا `git push` به یک آدرس HTTP ارسال شده‌اند و تعیین می‌کند که آیا کاربر
می‌تواند با HTTP ارتباط برقرار کند(که از ورژن ۱.۶.۶ امکان پذیر بوده است.).
اگر اسکریپت CGI ببنید که کاربر هوشمند است به صورت هوشمند با او ارتباط برقرار می‌کند؛ در غیر این صورت به رفتارهای احمقانه خودش
باز میگردد(بنابراین به خاطر گذشته‌ای که دارد می‌تواند با کاربران قدیمی نیز ارتباط برقرار کند).

بریم جلوتر و یک راه‌اندازی کاملا ابتدایی انجام دهیم.
ما این اسکریپت را بر روی آپاچی به عنوان یک سرور CGI راه اندازی می‌کنیم.
اگر شما آپاچی ندارید می‌توانید آن را بر روی لینوکس باکس با چنین چیزی راه‌اندازی کنید:(((Apache)))

[source,console]
----
$ sudo apt-get install apache2 apache2-utils
$ a2enmod cgi alias env
----

همنین این اسکریپت ماژول‌های `mode_cgi`، `mode_alias`، `mode_env` را فعال می‌کند که احتمالا لازمه کار این اسکریپت است.

شما همچنین نیاز دارید تا پوشه `srv/git/` را به گروه کاربر یونیکس (Unix user group) در `www-data` اضافه کنید، بنابراین
وب سرور شما قادر خواهد بود که دسترسی خواند و نوشتن به مخزن را داشته باشد،‌ زیرا اینستنس آپاچی اسکرپیت CGI را به عنوان
آن کاربر (به صورت پیش فرض) اجرا خواهد کرد:

[source,console]
----
$ chgrp -R www-data /srv/git
----

بعد ما نیاز داریم تا چند مورد را به تنظیمات آپاچی اضافه کنیم تا `git-http-backend` اجرا شود و هر چیزی که به مسیر `git/`
وب سرور شما بیاید را رسیدگی کند.

[source,console]
----
SetEnv GIT_PROJECT_ROOT /srv/git
SetEnv GIT_HTTP_EXPORT_ALL
ScriptAlias /git/ /usr/lib/git-core/git-http-backend/
----

اگر شما متغییر `GIT_HTTP_EXPORT_ALL` را رها کنید، گیت فقط به کاربران تایید نشده مخازن با فایل `git-daemon-export-ok` که
درون آن‌ها هست سرویس دهی می‌کند، همانطور که دیمن گیت این کار را می‌کرد.

در آخر شما می‌خواهید به آپاچی بگویید که اجازه‌ی درخواست‌های `git-http-backend` داده‌ شود و به نوعی نوشتن‌ها را تایید کند،
احتمالا با یک بلاک تصدیق هویت مثل این:

[source,console]
----
<Files "git-http-backend">
    AuthType Basic
    AuthName "Git Access"
    AuthUserFile /srv/git/.htpasswd
    Require expr !(%{QUERY_STRING} -strmatch '*service=git-receive-pack*' || %{REQUEST_URI} =~ m#/git-receive-pack$#)
    Require valid-user
</Files>
----

شما لازم دارید که تا یک فایل `htpasswd.` بسازید که شامل رمزهای عبور همه‌ی کاربران تاییده شده است.
اینجا یک مثال از اضافه کردن کاربری به نام ``schacon`` به فایل هست:

[source,console]
----
$ htpasswd -c /srv/git/.htpasswd schacon
----

صدها را وجود دارد تا تصدیق هویت آپاچی کاربران را داشته باشید، شما فقط یکی را انتخاب و پیاده سازی کنید.
این فقط یک مثال بسیار ساده بود که چطور می‌توانیم آن را راه‌اندازی کنیم.
احتما شما بخواهید تمام این مراحل را با پروتکل SSL پیش ببرید که بنابراین همه‌ی اطلاعات رمزنگاری خواهند شد.

ما نمی‌خواهیم به دورن مشخصات پیکربندی آپاچی که مانند یک لونه خرگوش عمیق است برویم، تا وقتی که شما بخواهید
از سروری دیگر استفاده کنید یا نیاز به گونه‌ای دیگر از تصدیق هویت داشته باشید.

نیت این است که گیت به همراه CGI که آن را `git-http-backend` صدا می‌زدیم بیاییند و مذاکرات را برای ارسال و
دریافت اطلاعات براساس HTTP انجام دهند. به تنهایی هیچ‌گونه تصدیق هویتی انجام نمی‌دهد، اما می‌توان به راحتی با لایه یک وب سرور
آن را کنترل کردو
شما این کار را می‌توانید را با هر وب سروری که با CGI همخوانی دارد انجام دهید، بنابراین بروید سراغ چیزی که بهتر بلد هستید.

[NOTE]
====
برای اطلاعات بیشتر درباره پیکربندی تصدیق هویت در آپاچی، مستندات آپاچی را بررسی کنید.
https://httpd.apache.org/docs/current/howto/auth.html[]
====
