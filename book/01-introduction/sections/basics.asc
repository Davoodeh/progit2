=== أساسيات جيت

إذا, ماهو جيت باختصار؟
هذا قسم مهم عليك استيعابه, لأنك إذا فهمت ما هو جيت و أساسيات كيف يعمل, عندها استخدام جيت بفعالية سيكون غالباً أكثر سهولة بالنسبة لك.
خلال تعلمك جيت, حاول تصفية ذهنك من الأمور التي قد تعرفها حول أنظمة التحكم بالنسخ, مثل CVS, Subversion أو Perforce -- القيام بهذا سوف يساعدك تجنب الأرتباك عند استخدام الأداة.
على الرغم من كون واجهات المستخدم مشابهة جداً للتي موجودة في أنظمة التحكم بالنسخ الأخرى, جيت يخزن ويتعامل مع البيانات بطريقة مختلفة جداً, وفهم هذه الإختلافات سيساعدك على تجنب أن تصبح مرتبكاً عند استخدامه.(((Subversion)))(((Perforce)))

=== لقطات وليست إختلافات

الإختلاف الرئيسي بين جيت وأنظمة التحكم بالنسخ الأخرى (Subversion و أشباهه المذكورين في الكتاب) هو طريقة تعامل جيت مع البيانات.
من الناحية النظرية, معظم الأنظمة الأخرى تخزن البيانات كقائمة من التغييرات التي تمت على الملفات.
هذه الأنظمة الأخرى (CVS, Subversion, Perforce, Bazaar, وهلم جرا) تتعامل مع المعلومات التي تخزنها كمجموعة من الملفات والتغييرات التي تحدث على كل ملف بمرور الزمن.

.ترتيب البيانات كتغييرات على الإصدار الرئيسي لكل ملف.
image::images/deltas.png[Storing data as changes to a base version of each file.]

جيت لا يتعامل مع تخزين البيانات بهذه الطريقة.
بدلاً من ذلك, جيت يتعامل مع هذه البيانات أشبه بسلسلة من اللقطات لنظام ملفات مصغر.
مع جيت, في كل مرة تودِع أو تحفظ حالة مشروعك, جيت في الأساس يأخذ صورة لكيف تبدو كل ملفاتك في تلك اللحظة و يخزن الإشارة لتلك اللقطة.
وليكون الأمر أكثر فاعلية, إذا لم يتم إجراء أي تغييرات, عندها لا يقوم بتخزين الملف مجدداً, فقط رابط لحالة الملف السابقة التي تم حفظها من قبل.
جيت يتعامل مع البيانات أشبه *بمجرى لقطات*

.تخزين البيانات كلقطات للمشروع بمرور الوقت.
image::images/snapshots.png[Git stores data as snapshots of the project over time.]

هذا تميّز كبير لجيت عن باقي أنظمة التحكم بالنسخ الأخرى.
مما يجعل جيت يعيد النظر بكل جانب من جوانب التحكم بالنسخ التي تقوم معظم الأنظمة الأخرى بنسخه من الجيل السابق.
حيث يجعل هذا الأمر جيت أشبه بنطام ملفات مصغر مع بعض الأدوات المذهلة المبنية ضمنه, عوضاً عن كونه نظام تحكم بالنسخ بسيط.
سوف نستكشف بعض الفوائد التي ستحصل عليها بالتعامل مع البيانات بهذه الطريقة عندما نغطي موضوع فروع جيت في قسم <<_git_branching>>.

=== تقريباً جميع العمليات محلية

معظم العمليات في جيت تحتاج فقط ملفات محلية وموارد للعمل -- بشكل عام لا يوجد معلومات مطلوب من حاسوب أخر على شبكتك.
إذا كنت قد استخدمت نظام تحكم بالنسخ مركزي حيث أنَّ معظم العمليات فيه تعتمد على الشكبة, هذا الأمر سيجعلك تفكر أن جيت قد حصل على سرعة خارقة.
لأنك تملك كامل سجل المشروع أمامك على جهازك المحلي, و معظم العمليات تنتهي بسرعة كبيرة.

على سبيل المثال, لتصفح سجل المشروع, جيت لا يحتاج للإتصال بالخادم ليعرضه لك -- إنه ببساطة يقوم بعرضه مباشرةً لك من قاعدة البيانات المحلية.
هذا يعني أنك سترى سجل المشروع بشكل فوري تقريباً.
إذا أردت رؤية التغييرات المدخلة بين النسخة الحالية من الملف و الملف من شهر مضى, جيت يستطيع الحصول على الملف من شهر مضى والقيام بحساب الإختلافات محلياً, بدلاً من إما أن يطلب من الخادم المركزي ليفعل ذلك أو أن يقوم بسحب نسخة أقدم من الملف من الخادم ليقوم بالأمر محلياً.

هذا أيضاً يعني أن هناك أمور قليلة لا يمكنك القيام بها عندما لا تكون متصل بالأنترنت أو بشكبة افتراضية خاصة.
إذا كنت على طائرة أو على قطار و تريد القيام بعمل صغير, تستطيع تنفيذه بسعادة (على نسختك _المحلية_, هل تذكر؟) حتى تحصل على إتصال بالشبكة لترفع هذه التغييرات.
أو إذا ذهبت إلى المنزل ولا تستطيع الحصول على عميل الشبكة الإفتراضية الخاصة يعمل بشكل جيد, فمازلت تستطيع العمل.
في العديد من الأنظمة الأخرى, القيام بهذا إما مستحيل أو صعب.
في  Perforce, على سبيل المثال, لا تستطيع فعل الكثير عندما لا تكون متصل بالخادم; و في Subversion و أنظمة التحكم بالنسخ المركزية, تستطيع تعديل الملفات, ولكن لا تستطيع إيداع هذه التغييرات إلى قاعدة بياناتك (لأنَّ قاعدة بياناتك غير متصلة).
هذا الأمر قد لا يبدو كمشكلة كبيرة, ولكن قد تتفاجئ بالإختلاف الكبير الذي يمكن أن يحدثه. 

=== جيت لديه مصداقية 

كل شيء في جيت يتم اختباره (check-summed) قبل أن يُخزن وبعدها يُشار إليه بذلك المجموع الإختباري (checksum).
هذا يعني أنَّه من المستحيل تغيير محتوى أي ملف أو دليل (مجلد) بدون أن يعلم جيت بذلك.
هذه الوظيفة مبنية في جيت في أدنى المستويات و تعد جزأ لا يتجزأ من فلسفته.
لا تستطيع فقدان المعلومات في النقل أو الحصول على ملف معطوب من دون أن يستطيع جيت تحديد ذلك.
 
التقنية التي يستخدمها جيت لهذا الاختبار (checksumming) تسمى دالة SHA-1.(((SHA-1)))
هذه السلسلة مكونة من 40 حرف تتألف من أحرف سداسية عشرية (0-9 و a-f) وتحسب استنادا إلى محتويات ملف أو بنية الدليل في جيت.
دالة SHA-1 تبدو كشيء مثل:

[source]
----
24b9da6552252987aa493b52f8696cd6d3b00373
----

سوف ترى قيم هذه الدالة في جميع أنحاء جيت لأنه يستخدمها كثيراً.
في الحقيقة, جيت يخزن كل شيء في قاعدة بياناته ليس تبعاً لاسم الملف بل تبعاً لقيمة دالة محتوياته.

=== جيت بشكل عام يضيف بيانات فقط

عندما تقوم بالعمليات في جيت, تقريباً جميعها تقوم _بإضافة_ البيانات فقط لقاعدة بيانات جيت.
من الصعب جعل النظام أن يقوم بأي شيء  غير قابل للتراجع أو جعله يمحو البيانات بأي شكل من الأشكال.
كما في أي نظام تحكم بالنسخ, تستطيع فقدان أو إفساد تغييرات لم تقم بإيداعها بعد, ولكن بعد إيداع لقطة إلى جيت, من الصعب جداً فقدانها, خاصةً إذا كنت تدفع قاعدة البيانات بانتظام إلى حاوية أخرى.

هذا يجعل استخدام جيت ممتع لأننا نعلم أنه يمكننا التجربة دون تعريض البيانات للخطر.
للمزيد من المعلومات بشكل أعمق انظر إلى كيف جيت يقوم بتخزين بياناته وكيف تستطيع استعادة البيانات الضائعة, انظر إلى <<_undoing>>.

=== الحالات الثلاثة

قم بالانتباه الأن -- هنا الشيء الرئيسي الذي يجب أن تتذكره حول جيت إذا كنت تريد أن تكمل بقية عملية تعلمك بسلاسة.
جيت لديه ثلاثة حالات رئيسية و التي يمكن أن توجد بها ملفاتك: _مُودَعة_, _مُعدَلة_, و _مهيئة للعمل_:

* مُودَعة تعني أنَّ البيانات مخزنة بأمان في قاعدة بياناتك المحلية.
* مُعدَلة تعني أنَّك قمت بتعديل الملف ولكن لم تودعه إلى قاعدة بياناتك بعد.
* مُهيئة تعني أنّك حددت ملفاً قمت بتعديله بإصداره الحالي ليتم حفظه في عملية الإيداع التي ستقوم بها.

هذا يقودنا إلى ثلاثة أقسام رئيسية من مشروع جيت: دليل جيت, شجرة العمل, منطقة التهيئة.

.شجرة العمل, منطقة التهيئة, و دليل جيت.
image::images/areas.png["Working tree, staging area, and Git directory."]

دليل جيت هو مكان حيث جيت يحفظ البيانات الوصفية و قاعدة بيانات الكائن لمشروعك.
هذا هو الجزأ الأهم من جيت, وهو ما يتم نسخه عندما _تستنسخ_ حاوية من حاسوب أخر.
 
شجرة العمل هي النسخة الحالية المسحوبة من مشروعك.
الملفات التي يتم سحبها من قاعدة البيانات المضغوطة في دليل جيت, ويتم وضعها على القرص لتقوم بتعديلها.

منطقة التهيئة هو ملف, بشكل عام موجود في دليل جيت, الذي يخزن المعلومات حول ما الذي سيتم إيداعه في الإيداع التالي.
اسمه التقني باسلوب جيت هو ``الفهرس``, ولكن عبارة ``منطقة التهيئة`` تعبر عنه كذلك.

سير العمل في جيت يبدو كشيء من هذا القبيل:

1. أنت تقوم بتعديل الملفات في شجرة العمل.
2. أنت تختار المرحلة التي هذه التغييرات التي تريدها ستكون جزأ من الإيداع التالي, والذي يضيف _فقط_ هذه التغييرات إلى منطقة التهيئة.
3. أنت تقوم بالإيداع, الذي يأخذ الملفات كما هي في منطقة التهيئة و يخزن اللقطة باستمرار إلى دليل جيت.

إذا كان إصدار معين من الملف في دليل جيت، فهو يعتبر مودعاً.
إذا تم تعديله وتم إضافته إلى منطقة التهيئة، يتم تهيئته.
وإذا تم تغييره منذ أن تم سحبه ولكن لم يتم تهيئته، يتم تعديله.
في <<_git_basics_chapter>>, ستتعلم المزيد حول هذه الحالات و كيف يمكنك إما ان تستفاد منها أو تتخطى كامل الجزأ المهيأ.
